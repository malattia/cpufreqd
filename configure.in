# Process this file with autoconf to produce a configure script.
AC_INIT([cpufreqd],[2.4.3],[malattia@linux.it], [cpufreqd])
AC_CANONICAL_TARGET([])

AM_INIT_AUTOMAKE(1.8 dist-bzip2 foreign)
AC_CONFIG_SRCDIR([config.h.in])
AM_CONFIG_HEADER(config.h)

# libtool
AC_LIBTOOL_DLOPEN
AC_ENABLE_SHARED
AC_DISABLE_STATIC
AM_PROG_LIBTOOL
AC_PROG_LIBTOOL
AC_SUBST(LIBTOOL_DEPS)

# Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL

# Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_TIME
AC_CHECK_HEADERS([fcntl.h fnmatch.h limits.h syslog.h unistd.h getopt.h errno.h \
		  sys/types.h sys/stat.h signal.h ctype.h dlfcn.h libgen.h \
		  sys/socket.h sys/un.h cpufreq.h], [],
		 [ AC_MSG_ERROR([Cannot continue, see above which header is missing]) ],
		 [])
# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST

# Checks for library functions.
AC_FUNC_FORK
AC_FUNC_MALLOC
AC_FUNC_STAT
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([memset realpath strerror strstr scandir socket connect perror])

# Checks for needed libraries.
AC_CHECK_LIB([dl], [dlopen],
		[ CPUFREQD_LDFLAGS="${CPUFREQD_LDFLAGS} -ldl" ],
		[ AC_MSG_ERROR([You need a working dlopen to build cpufreqd]) ])
AC_CHECK_LIB([cpufreq], [cpufreq_cpu_exists],
		[ CPUFREQD_LDFLAGS="${CPUFREQD_LDFLAGS} -lcpufreq" ],
		[ AC_MSG_ERROR([You need libcpufreq from cpufrequtils to build cpufreqd]) ])
AC_SUBST(CPUFREQD_LDFLAGS)

DISABLED_PLUGINS=""
ENABLED_PLUGINS=" cpu programs"

########################
# POSIX Thread library #
########################
pthread_support=
AC_ARG_WITH([pthread],
	[AS_HELP_STRING(
		[--with-pthread[[[[=PATH]]]]],
		[POSIX Thread library - needed by the exec and ACPI-event plugins [default=autodetected]])
	],
	[pthread_enable=$withval],
	[pthread_enable=yes]
	)
OLD_CPPFLAGS="$CPPFLAGS"
OLD_CFLAGS="$CFLAGS"
OLD_LDFLAGS="$LDFLAGS"
if test "x$pthread_enable" != xno; then

	if test "x$pthread_enable" != xyes; then
		CPPFLAGS="$CPPFLAGS -I${pthread_enable}/include"
		CFLAGS="$CFLAGS -I${pthread_enable}/include"
		LDFLAGS="$LDFLAGS -L${pthread_enable}/lib"
	fi

	AC_CHECK_HEADER([pthread.h],
		[ AC_CHECK_LIB([pthread], [pthread_create],
			[ AC_DEFINE(PTHREAD_DIR, , [Define this to enable pthread support])
			if test "x$pthread_enable" != xyes; then
				PTHREAD_SRCDIR="${pthread_enable}"
			else
				PTHREAD_SRCDIR="/usr"
			fi
			pthread_lib=success
			],
			[pthread_lib=failed])
		],
		[pthread_lib=failed])
fi
CPPFLAGS="$OLD_CPPFLAGS"
CFLAGS="$OLD_CFLAGS"
LDFLAGS="$OLD_LDFLAGS"
if test "x$pthread_lib" = xfailed; then
	echo '***************************************************'
	echo '***      ERROR WHILE CONFIGURING CPUFREQD       ***'
	echo '***************************************************'
	AC_MSG_ERROR([Failed to find necessary libpthread development files in ${pthread_enable}])
fi
AM_CONDITIONAL(PTHREAD_LIB, test x"${pthread_lib}" = xsuccess)
AC_SUBST(PTHREAD_SRCDIR)

################
# ACPI support #
################
AC_ARG_ENABLE([acpi],
	[AS_HELP_STRING(
		[--enable-acpi],
		[acpi plugins - will provide the 4 ACPI cpufreqd plugins [default=enabled]])
	],
	[acpi_enable=$enableval],
	[acpi_enable=yes]
	)
if test x"${pthread_lib}" != xsuccess; then
	echo '*********************************************'
	echo '***      ACPI Event plugin disabled       ***'
	echo '*********************************************'
	AC_WARNING(all, [The ACPI Event plugin needs a POSIX Thread library but none detected, use --with-pthread])
fi

AM_CONDITIONAL(ACPI_PLUGIN, test x"${acpi_enable}" = xyes)
if test x"${acpi_enable}" = xyes && test x"${pthread_lib}" = xsuccess; then
	ENABLED_PLUGINS="$ENABLED_PLUGINS acpi_event"
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS acpi_event"
fi
if test x"${acpi_enable}" = xyes; then
	ENABLED_PLUGINS="$ENABLED_PLUGINS acpi_battery acpi_ac acpi_temperature"
	CHECK_SYSFS=yes
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS acpi_battery acpi_ac acpi_temperature"
fi

###################
# NFORCE2 support #
###################
AC_ARG_ENABLE([nforce2],
	[AS_HELP_STRING(
		[--enable-nforce2],
		[nforce2 plugin - will provide the NFORCE2 cpufreqd plugin [default=enabled]])
	],
	[nforce2_enable=$enableval],
	[nforce2_enable=yes]
	)
AM_CONDITIONAL(NFORCE2_PLUGIN, test x"${nforce2_enable}" = xyes)
if test x"${nforce2_enable}" = xyes; then
	ENABLED_PLUGINS="$ENABLED_PLUGINS nforce2"
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS nforce2"
fi

###################
# NVCLOCK support #
###################
AC_ARG_ENABLE([nvclock],
	[AS_HELP_STRING(
		[--enable-nvclock=PATH],
		[nvclock plugin - will provide the NVCLOCK cpufreqd plugin, requires nvclock's additional libraries in PATH [default=disabled]])
	],
	[nvclock_enable=$enableval],
	[nvclock_enable=no]
	)
if test "x$nvclock_enable" = xyes; then
	echo '***************************************************'
	echo '***      ERROR WHILE CONFIGURING CPUFREQD       ***'
	echo '***************************************************'
	AC_MSG_ERROR([NVCLOCK support needs a configured and built Nvclock tree, please supply it with --enable-nvclock=PATH])
else
	OLD_CPPFLAGS="$CPPFLAGS"
	OLD_CFLAGS="$CFLAGS"
	OLD_LDFLAGS="$LDFLAGS"
	if test "x$nvclock_enable" != xno; then

		if test "x$nvclock_enable" != xno; then
			
#CPPFLAGS="$CPPFLAGS -I${nvclock_enable}/src/backend -I${nvclock_enable}/src/nvcontrol"
#CFLAGS="$CFLAGS -I${nvclock_enable}/src/backend -I${nvclock_enable}/src/nvcontrol"
#LDFLAGS="$LDFLAGS -L${nvclock_enable}/src/backend -L${nvclock_enable}/src/nvcontrol -lbackend -lnvcontrol"
#[-lnvcontrol -lXext -lX11]
			
			CPPFLAGS="$CPPFLAGS -I${nvclock_enable}/src/backend"
			CFLAGS="$CFLAGS -I${nvclock_enable}/src/backend"
			LDFLAGS="$LDFLAGS -L${nvclock_enable}/src/backend"
		fi

		AC_CHECK_HEADER([backend.h],
			[ AC_CHECK_LIB([backend], [init_nvclock],
				[ AC_DEFINE(NVCLOCK_PLUGIN, , [Define this to compile NVCLOCK support])
				if test "x$nvclock_enable" != xyes; then
					NVCLOCK_SRCDIR="${nvclock_enable}"
				fi
				],
				[nvclock_support=failed])
			],
			[nvclock_support=failed])
	fi
	CPPFLAGS="$OLD_CPPFLAGS"
	CFLAGS="$OLD_CFLAGS"
	LDFLAGS="$OLD_LDFLAGS"
fi
if test "x$nvclock_support" = xfailed; then
	echo '***************************************************'
	echo '***      ERROR WHILE CONFIGURING CPUFREQD       ***'
	echo '***************************************************'
	AC_MSG_ERROR([NVCLOCK tree not found in ${nvclock_enable}, please supply the correct path with --enable-nvclock=PATH])
fi
AM_CONDITIONAL(NVCLOCK_PLUGIN, test x"${nvclock_enable}" != xno)
if test x"${nvclock_enable}" != xno; then
	ENABLED_PLUGINS="$ENABLED_PLUGINS nvclock"
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS nvclock"
fi
AC_SUBST(NVCLOCK_SRCDIR)

###############
# APM support #
###############
AC_ARG_ENABLE([apm],
	[AS_HELP_STRING(
		[--enable-apm],
		[apm plugin - will provide the APM cpufreqd plugin [default=enabled]])
	],
	[apm_enable=$enableval],
	[apm_enable=yes]
	)
AM_CONDITIONAL(APM_PLUGIN, test x"${apm_enable}" = xyes)
if test x"${apm_enable}" = xyes; then
	ENABLED_PLUGINS="$ENABLED_PLUGINS apm"
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS apm"
fi

###############
# PMU support #
###############
AC_ARG_ENABLE([pmu],
	[AS_HELP_STRING(
		[--enable-pmu],
		[pmu plugin - will provide the PMU cpufreqd plugin [default=enabled]])
	],
	[pmu_enable=$enableval],
	[pmu_enable=yes]
	)
AM_CONDITIONAL(PMU_PLUGIN, test x"${pmu_enable}" = xyes)
if test x"${pmu_enable}" = xyes; then
	ENABLED_PLUGINS="$ENABLED_PLUGINS pmu"
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS pmu"
fi

###################
# SENSORS support #
###################
AC_ARG_ENABLE([sensors],
	[AS_HELP_STRING(
		[--enable-sensors[[[[=PATH]]]]],
		[sensors support - will provide the sensors cpufreqd plugin, needs libsensors [default=autodetected]])
	],
	[sensors_enable=$enableval],
	[sensors_enable=yes]
	)
OLD_CPPFLAGS="$CPPFLAGS"
OLD_CFLAGS="$CFLAGS"
OLD_LDFLAGS="$LDFLAGS"
if test "x$sensors_enable" != xno; then

	if test "x$sensors_enable" != xyes; then
		CPPFLAGS="$CPPFLAGS -I${sensors_enable}/include"
		CFLAGS="$CFLAGS -I${sensors_enable}/include"
		LDFLAGS="$LDFLAGS -L${sensors_enable}/lib"
	fi

	AC_CHECK_HEADER([sensors/sensors.h],
		[ AC_CHECK_LIB([sensors], [sensors_init],
			[ AC_DEFINE(SENSORS_PLUGIN, , [Define this to compile sensors support])
			if test "x$sensors_enable" != xyes; then
				SENSORS_SRCDIR="${sensors_enable}"
			else
				SENSORS_SRCDIR="/usr"
			fi
			sensors_support=success
			],
			[sensors_support=failed])
		],
		[sensors_support=failed])
fi
CPPFLAGS="$OLD_CPPFLAGS"
CFLAGS="$OLD_CFLAGS"
LDFLAGS="$OLD_LDFLAGS"
if test "x$sensors_support" = xfailed && test "x$sensors_enable" != xyes; then
	echo '***************************************************'
	echo '***      ERROR WHILE CONFIGURING CPUFREQD       ***'
	echo '***************************************************'
	AC_MSG_ERROR([Failed to find requested libsensors development files in ${sensors_enable}])
fi
AM_CONDITIONAL(SENSORS_PLUGIN, test x"${sensors_support}" = xsuccess)
if test x"${sensors_support}" = xsuccess; then
	ENABLED_PLUGINS="$ENABLED_PLUGINS sensors"
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS sensors"
fi
AC_SUBST(SENSORS_SRCDIR)

################
# EXEC support #
################
AC_ARG_ENABLE([exec],
	[AS_HELP_STRING(
		[--enable-exec],
		[exec support - will provide the exec cpufreqd plugin, needs libpthread [default=enabled but depends on libpthread availability]])
	],
	[exec_enable=$enableval],
	[
		if  test x"${pthread_lib}" = xsuccess; then
			exec_enable=yes
		else
			exec_enable=no
		fi
	]
	)
if test x"${pthread_lib}" != xsuccess && test x"$exec_enable" = xyes; then
	echo '***************************************************'
	echo '***      ERROR WHILE CONFIGURING CPUFREQD       ***'
	echo '***************************************************'
	AC_MSG_ERROR([The EXEC plugin needs a POSIX Thread library but none detected, use --with-pthread])
fi
AM_CONDITIONAL(EXEC_PLUGIN, test x"${exec_enable}" = xyes)
if test x"${exec_enable}" = xyes; then
	ENABLED_PLUGINS="$ENABLED_PLUGINS exec"
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS exec"
fi

################################
#  Governor parameters support #
################################
AC_ARG_ENABLE([governor-parameters],
	[AS_HELP_STRING(
		[--enable-governor-parameters],
		[governor parameters plugin - support for setting governor parameters in profiles [default=enabled]])
	],
	[governor_parameters_enable=$enableval],
	[governor_parameters_enable=yes]
	)
AM_CONDITIONAL(GOVERNOR_PARAMETERS_PLUGIN, test x"${governor_parameters_enable}" = xyes)
if test x"${governor_parameters_enable}" = xyes; then
	ENABLED_PLUGINS="$ENABLED_PLUGINS governor_parameters"
	CHECK_SYSFS=yes
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS governor_parameters"
fi

###############
# TAU support #
###############
AC_ARG_ENABLE([tau],
	[AS_HELP_STRING(
		[--enable-tau],
		[tau plugin - will provide the TAU (Thermal Assist Unit) cpufreqd plugin [default=enabled]])
	],
	[tau_enable=$enableval],
	[tau_enable=yes]
	)
AM_CONDITIONAL(TAU_PLUGIN, test x"${tau_enable}" = xyes)
if test x"${tau_enable}" = xyes; then
	ENABLED_PLUGINS="$ENABLED_PLUGINS tau"
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS tau"
fi


# Defines two useful paths in order to remove hardcoded paths
if test "x$prefix" = xNONE; then
  prefix="${ac_default_prefix}"
fi
   
if test "x$exec_prefix" = xNONE; then
  exec_prefix="${prefix}"
fi

# do we also need -lsysfs?
if test x"${CHECK_SYSFS}" = xyes; then
	AC_CHECK_HEADERS([ sysfs/libsysfs.h ], [],
			 [ AC_MSG_ERROR([You need libsysfs development headers to build cpufreqd]) ])
	AC_CHECK_LIB([sysfs], [sysfs_open_attribute],
		     [ "" ], # leave this empty to avoid having -lsysfs on all objects
		     [ AC_MSG_ERROR([You need libsysfs development libraries to build cpufreqd]) ])
fi

CPUFREQD_LIBDIR="$libdir/"
eval CPUFREQD_LIBPATH="$CPUFREQD_LIBDIR"
AC_DEFINE_UNQUOTED(CPUFREQD_LIBDIR,"$CPUFREQD_LIBPATH",[Define this to plugins dir location])
AC_SUBST(CPUFREQD_LIBPATH)

CPUFREQD_CONFDIR="$sysconfdir/"
eval CPUFREQD_CONFPATH="$CPUFREQD_CONFDIR"
AC_DEFINE_UNQUOTED(CPUFREQD_CONFDIR,"$CPUFREQD_CONFPATH",[Define this to configuration dir location])
AC_SUBST(CPUFREQD_CONFPATH)

CPUFREQD_STATEDIR="$localstatedir/"
eval CPUFREQD_STATEPATH="$CPUFREQD_STATEDIR"
AC_DEFINE_UNQUOTED(CPUFREQD_STATEDIR,"$CPUFREQD_STATEPATH",[Define this to local state dir location])
AC_SUBST(CPUFREQD_STATEPATH)

# substitues the manpages paths
CPUFREQD_CONFDIR="${sysconfdir%/}"
eval CPUFREQD_CONF_DIR="$CPUFREQD_CONFDIR"
AC_DEFINE_UNQUOTED(CPUFREQD_CONFDIR,"$CPUFREQD_CONFPATH",[Define this to configuration dir location])
AC_SUBST(CPUFREQD_CONF_DIR)

#AC_CONFIG_SUBDIRS(src utils manpages)

AC_CONFIG_FILES([
Makefile
src/Makefile
utils/Makefile
manpages/Makefile
])
AC_OUTPUT([
manpages/cpufreqd.8
])

echo "
cpufreqd configuration:
--------------------------------------------------
Compiler:		${CC}
Enabled plugins:	${ENABLED_PLUGINS}
Disabled plugins:	${DISABLED_PLUGINS}
--------------------------------------------------
"
