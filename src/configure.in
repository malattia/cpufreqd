# Process this file with autoconf to produce a configure script.
AC_INIT([cpufreqd],[2.0.0-pre1],[malattia@linux.it], [cpufreqd])
AC_CANONICAL_TARGET([])

AM_INIT_AUTOMAKE(1.8 dist-bzip2 foreign)

AC_CONFIG_SRCDIR([cpufreqd.h])
AM_CONFIG_HEADER(config.h)

# libtool
AC_LIBTOOL_DLOPEN
AC_ENABLE_SHARED
AC_DISABLE_STATIC
AM_PROG_LIBTOOL
AC_PROG_LIBTOOL
AC_SUBST(LIBTOOL_DEPS)

# Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL

# Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_TIME
AC_CHECK_HEADERS([fcntl.h fnmatch.h limits.h syslog.h unistd.h getopt.h errno.h sys/types.h sys/stat.h signal.h ctype.h dlfcn.h libgen.h cpufreq.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST

# Checks for library functions.
AC_FUNC_FORK
AC_FUNC_MALLOC
AC_FUNC_STAT
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([memset realpath strerror strstr])

# Checks for needed libraries.
AC_CHECK_LIB([dl], [dlopen],
		[ CPUFREQD_LDFLAGS="${CPUFREQD_LDFLAGS} -ldl" ],
		[ AC_MSG_ERROR([You need a working dlopen to build cpufreqd]) ])
AC_CHECK_LIB([cpufreq], [cpufreq_cpu_exists],
		[ CPUFREQD_LDFLAGS="${CPUFREQD_LDFLAGS} -lcpufreq" ],
		[ AC_MSG_ERROR([You need libcpufreq from cpufrequtils to build cpufreqd]) ])
AC_SUBST(CPUFREQD_LDFLAGS)

DISABLED_PLUGINS=""
ENABLED_PLUGINS=" cpu programs"

################
# ACPI support #
################
AC_ARG_ENABLE([acpi],
	[  --enable-acpi		acpi plugins - will provide the 3 ACPI cpufreqd plugins [[default=enabled]]],
	[acpi_enable=$enableval],
	[acpi_enable=yes]
	)
AM_CONDITIONAL(ACPI_PLUGIN, test x"${acpi_enable}" = xyes)
if test x"${acpi_enable}" = xyes; then
	ENABLED_PLUGINS="$ENABLED_PLUGINS acpi_battery acpi_ac acpi_temperature"
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS acpi_battery acpi_ac acpi_temperature"
fi

###################
# NFORCE2 support #
###################
AC_ARG_ENABLE([nforce2],
	[  --enable-nforce2	nforce2 plugin - will provide the NFORCE2 cpufreqd plugin [[default=enabled]]],
	[nforce2_enable=$enableval],
	[nforce2_enable=yes]
	)
AM_CONDITIONAL(NFORCE2_PLUGIN, test x"${nforce2_enable}" = xyes)
if test x"${nforce2_enable}" = xyes; then
	ENABLED_PLUGINS="$ENABLED_PLUGINS nforce2"
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS nforce2"
fi

###################
# NVCLOCK support #
###################
AC_ARG_ENABLE([nvclock],
	[  --enable-nvclock=PATH	nvclock plugin - will provide the NVCLOCK cpufreqd plugin, requires nvclock's additional libraries in PATH [[default=disabled]]],
	[nvclock_enable=$enableval],
	[nvclock_enable=no]
	)
if test "x$nvclock_enable" = xyes; then
	echo '***************************************************'
	echo '***      ERROR WHILE CONFIGURING CPUFREQD       ***'
	echo '***************************************************'
	AC_MSG_ERROR([NVCLOCK support needs a configured and built Nvclock tree, please supply it with --enable-nvclock=PATH])
else
	OLD_CFLAGS="$CFLAGS"
	OLD_LDFLAGS="$LDFLAGS"
	if test "x$nvclock_enable" != xno; then

		if test "x$nvclock_enable" != xno; then
			CFLAGS="$CFLAGS -I${nvclock_enable}"
			LDFLAGS="$LDFLAGS -L${nvclock_enable} -lbackend"
		fi

		AC_CHECK_HEADER([backend.h],
			[ AC_CHECK_LIB([backend], [FindAllCards],
				[ AC_DEFINE(NVCLOCK_PLUGIN, , [Define this to compile NVCLOCK support])
				if test "x$nvclock_enable" != xyes; then
					NVCLOCK_CFLAGS="-I${nvclock_enable}"
					NVCLOCK_LDFLAGS="-L${nvclock_enable} -lbackend"
				fi
				],
				[nvclock_support=failed])
			],
			[nvclock_support=failed])
	fi
	CFLAGS="$OLD_CFLAGS"
	LDFLAGS="$OLD_LDFLAGS"
fi
if test "x$nvclock_support" = xfailed; then
	echo '***************************************************'
	echo '***      ERROR WHILE CONFIGURING CPUFREQD       ***'
	echo '***************************************************'
	AC_MSG_ERROR([NVCLOCK tree not found in ${nvclock_enable}, please supply the correct path with --enable-nvclock=PATH])
fi
AM_CONDITIONAL(NVCLOCK_PLUGIN, test x"${nvclock_enable}" != xno)
if test x"${nvclock_enable}" != xno; then
	ENABLED_PLUGINS="$ENABLED_PLUGINS nvclock"
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS nvclock"
fi
AC_SUBST(NVCLOCK_CFLAGS)
AC_SUBST(NVCLOCK_LDFLAGS)

###############
# APM support #
###############
AC_ARG_ENABLE([apm],
	[  --enable-apm		apm plugin - will provide the APM cpufreqd plugin [[default=enabled]]],
	[apm_enable=$enableval],
	[apm_enable=yes]
	)
AM_CONDITIONAL(APM_PLUGIN, test x"${apm_enable}" = xyes)
if test x"${apm_enable}" = xyes; then
	ENABLED_PLUGINS="$ENABLED_PLUGINS apm"
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS apm"
fi

###############
# PMU support #
###############
AC_ARG_ENABLE([pmu],
	[  --enable-pmu		pmu plugin - will provide the PMU cpufreqd plugin [[default=enabled]]],
	[pmu_enable=$enableval],
	[pmu_enable=yes]
	)
AM_CONDITIONAL(PMU_PLUGIN, test x"${pmu_enable}" = xyes)
if test x"${pmu_enable}" = xyes; then
	ENABLED_PLUGINS="$ENABLED_PLUGINS pmu"
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS pmu"
fi

###################
# SENSORS support #
###################
AC_ARG_ENABLE([sensors],
	[  --enable-sensors[[=PATH]]	sensors support - will provide the sensors cpufreqd plugin, needs libsensors [[default=autodetected]]],
	[sensors_enable=$enableval],
	[sensors_enable=yes]
	)
OLD_CFLAGS="$CFLAGS"
OLD_LDFLAGS="$LDFLAGS"
if test "x$sensors_enable" != xno; then

	if test "x$sensors_enable" != xyes; then
		CFLAGS="$CFLAGS -I${sensors_enable}/include"
		LDFLAGS="$LDFLAGS -L${sensors_enable}/lib -lsensors"
	else
		LDFLAGS="$LDFLAGS -lsensors"
	fi

	AC_CHECK_HEADER([sensors/sensors.h],
		[ AC_CHECK_LIB([sensors], [sensors_init],
			[ AC_DEFINE(SENSORS_PLUGIN, , [Define this to compile sensors support])
			if test "x$sensors_enable" != xyes; then
				SENSORS_CFLAGS=" -I${sensors_enable}/include"
				SENSORS_LDFLAGS=" -L${sensors_enable}/lib -lsensors"
			else
				SENSORS_LDFLAGS=" -lsensors"
			fi
			sensors_support=success
			],
			[sensors_support=failed])
		],
		[sensors_support=failed])
fi
CFLAGS="$OLD_CFLAGS"
LDFLAGS="$OLD_LDFLAGS"
if test "x$sensors_support" = xfailed && test "x$sensors_enable" != xyes; then
	echo '***************************************************'
	echo '***      ERROR WHILE CONFIGURING CPUFREQD       ***'
	echo '***************************************************'
	AC_MSG_ERROR([Failed to find requested libsensors development files in ${sensors_enable}])
fi
AM_CONDITIONAL(SENSORS_PLUGIN, test x"${sensors_support}" = xsuccess)
if test x"${sensors_support}" = xsuccess; then
	ENABLED_PLUGINS="$ENABLED_PLUGINS sensors"
else
	DISABLED_PLUGINS="$DISABLED_PLUGINS sensors"
fi
AC_SUBST(SENSORS_CFLAGS)
AC_SUBST(SENSORS_LDFLAGS)

# Defines two useful paths in order to remove hardcoded paths
if test "x$prefix" = xNONE; then
  prefix="${ac_default_prefix}"
fi
   
if test "x$exec_prefix" = xNONE; then
  exec_prefix="${prefix}"
fi

CPUFREQD_LIBDIR="$libdir/"
eval CPUFREQD_LIBPATH="$CPUFREQD_LIBDIR"
AC_DEFINE_UNQUOTED(CPUFREQD_LIBDIR,"$CPUFREQD_LIBPATH",[Define this to plugins dir location])
AC_SUBST(CPUFREQD_LIBPATH)

CPUFREQD_CONFDIR="$sysconfdir/"
eval CPUFREQD_CONFPATH="$CPUFREQD_CONFDIR"
AC_DEFINE_UNQUOTED(CPUFREQD_CONFDIR,"$CPUFREQD_CONFPATH",[Define this to configuration dir location])
AC_SUBST(CPUFREQD_CONFPATH)

CPUFREQD_STATEDIR="$localstatedir/"
eval CPUFREQD_STATEPATH="$CPUFREQD_STATEDIR"
AC_DEFINE_UNQUOTED(CPUFREQD_STATEDIR,"$CPUFREQD_STATEPATH",[Define this to local state dir location])
AC_SUBST(CPUFREQD_STATEPATH)

AC_CONFIG_FILES([Makefile])
AC_OUTPUT

echo "
cpufreqd configuration:
--------------------------------------------------
Compiler:		${CC}
Enabled plugins:	${ENABLED_PLUGINS}
Disabled plugins:	${DISABLED_PLUGINS}
--------------------------------------------------
"
