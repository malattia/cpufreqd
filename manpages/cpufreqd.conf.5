.\" Copyright 2002-2005, George Staikos (staikos@0wned.org)
.\"                      Mattia Dongili (malattia@gmail.com)
.\"                      Rene Rebe (rene@rocklinux.org)
.\" This file may be used subject to the terms and conditions of the
.\" GNU General Public License Version 2, or any later version
.\" at your option, as published by the Free Software Foundation.
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
.\" GNU General Public License for more details."
.TH CPUFREQD.CONF 5 "05 May 2005" "" ""
.SH NAME
cpufreqd.conf \- configuration file for cpufreqd(1)
.SH DESCRIPTION
.I cpufreqd.conf
is a simple text file containing rules to be used by 
.B cpufreqd(1).

.B cpufreqd.conf
is divided into sections enclosed in tags (eg.: [General][/General]). 
You need at least one [General] section and one or more [Profile] and [Rule]
sections.  Each [Rule] depends on previously defined [Profile] subsections.

Some notes to better understand how to write appropriate rules:

.RS
- the score of a rule is made up of the percentage of entries that match
the current system state as reported by plugins + the number of matching
entries. In this way even a single entry rule can reach 100% but more accurate
rules are preferred.

- in case of 2 or more rules having the same score the first one is kept
and applied.

- each entry is handled by a single plugin that will determine if the state
described matches the current state

- if no rule matches the current system status, no action is performed.
.RE

What to keep in mind when writing rules:

.RS
- the \-V switch is your (hopefully) friend, test your configuration slightly
increasing 
.B cpufreqd
verbosity and look what happens

- if you want a rule to be preferred over another just describe the system state
more accurately
.RE

.fi
.sp
.PP
Note that no white space is allowed between name and value pairs.
Lines which begin with # are considered comments and ignored.
.sp
.SH "SECTIONS"
.PP
Acceptable configuration tokens and values include:

.PP
.SS "[General]"
.TP
.B "poll_interval"
An integer larger than 0, measures the interval between system status reading in seconds. (default: 1)

.TP
.B "enable_plugins"
A list of plugins separated by comma.

.TP
.B "pidfile"
Specifies the file to write as its process identification file. (default: /var/run/cpufreqd.pid)
./"
./".TP
./".B "acpi_workaround"
./"0 or 1 meaning disable and enable respectively. (default: 0) As some ACPI
./"implementations are very cpu-consuming when reading the info file of system
./"batteries. Cpufreqd implements a simple workaround that avoids reading that
./"file except on initialisation or reinitialisation. This has the effect of
./"needing to send an HUP signal if inserting a new battery, otherwise battery
./"measurement won't be correct.

.TP
.B "verbosity"
Verbosity level from 0 (less verbose) to 7 (most verbose), the default value only prints 
warning/error/critical messages. (default: 4)

.sp
.PP
.SS "[Profile]"

.TP
.B "name"
An arbitrary and unique name for your profile. [REQUIRED]

.TP
.B "minfreq" An integer value representing the minimum frequency to set in
/proc/cpufreq. This value can be both a percentage of the CPU full capacity or
frequency in kHz.

.TP
.B "maxfreq"
An integer value representing the maximum frequency to set. This value can be
both a percentage of the CPU full capacity or frequency in kHz.

.TP
.B "policy"
Can be any of the available governor's name as shown in
/sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors, this means
that if you compiled governors as modules in your kernel, you need to load them
before running cpufreqd. [REQUIRED]

.sp
.PP
.SS "[Rule]"

.TP
.B "name"
An arbitrary and unique name for your rule. [REQUIRED]

.TP
.B "profile"
A character string that must match a [Profile] section name property. [REQUIRED]

.TP
.B "other plugin entries"
Other Rule options are enabled according to the enabled plugins.

.SH PLUGINS
.RS
.sp
.PP
.SS "acpi_battery plugin"
Monitors the battery level as reported by /proc/acpi/battery/*/state. If
multiple batteries are present the battery level is computed summing all battery
capacities. Available Rule entries:
.TP
.B "battery_interval"
The rule will have a higher score if battery percentage is between the values
provided. Mustbe of the form %d-%d (e.g.: battery_interval=10-100).

.PP
.SS "acpi_ac plugin"
Monitors the AC state as reported by /proc/acpi/ac_adapter/*/state.
Available Rule entries:
.TP
.B "ac"
Can be on or off.  The rule will have a higher score if the A/C adapter is on or
off as defined in this setting.

.PP
.SS "acpi_temperature plugin"
Monitors the temperature as reported by /proc/acpi/thermal_zone/*/temperature.
Unfortunately as I don't currently have the necessary harware, if multiple
thermal zones are reported a medium value is computed. Available Rule entries:
.TP
.B "acpi_temperature"
The rule will have a higher score if the temperature percentage is corresponds
to the provided values. Can be of the form %d-%d (e.g.: acpi_temperature=10-100) or %d.

.PP
.SS "apm plugin"
Monitors values reported by the APM subsystem. Available Rule entries:
.B "ac"
Can be on or off.  The rule will have a higher score if the A/C adapter is on or
off as defined in this setting.

.TP
.B "battery_interval"
The rule will have a higher score if battery percentage is between the values
provided. Must be of the form %d-%d (e.g.: battery_interval=10-100).

.PP
.SS "cpu plugin"
Monitors the cpu usage. Available Rule entries:
.TP
.B "cpu_interval"
The rule will have a higher score if cpu usage is between the values
provided.  Must be of the form %d-%d (e.g.: cpu_interval=10-100). Rules with
overlapping cpu_intervals are allowed. You can also specify the scale to
calculate niced processes cpu usage with the form %d-%d,%f (e.g.:
cpu_interval=70-100,1.5), default is 3, in this way niced processes will be
considered 1/3 of their real value.

.PP
.SS "programs plugin"
Monitors active processes. Available entries:
.TP
.B "programs"
 The rule will have a higher score if one of the listed processes is running.
 This is  a  comma separated  list.   No  white  space is allowed between
 values.  cpufreqd will try to match each process name with the configured
 process list. If you need to match against program from a spe- cific location
 you have to supply the full path as search pattern.

.SH EXAMPLE
.RS
.sp
.nf
.ne 7
# cpufreqd.conf sample

# this is a comment
[General]
pidfile=/var/run/cpufreqd.pid
poll_interval=2
enable_plugins=acpi_battery,acpi_ac,acpi_temperature,programs,cpu
verbosity=5 #(if you want a minimal logging)
[/General]

[Profile]
name=hi_boost
minfreq=0%
maxfreq=100%
policy=performance
[/Profile]

[Profile]
name=medium_boost
minfreq=33%
maxfreq=66%
policy=performance
[/Profile]

[Profile]
name=lo_boost
minfreq=0%
maxfreq=33%
policy=performance
[/Profile]

[Profile]
name=lo_power
minfreq=0%
maxfreq=33%
policy=powersave
[/Profile]

# conservative mode when not AC
[Rule]
name=conservative
ac=off
battery_interval=0-100
cpu_interval=0-40
profile=lo_boost
[/Rule]

# need some power
[Rule]
name=lo_cpu_boost
ac=off
battery_interval=0-100
cpu_interval=30-80
profile=medium_boost
[/Rule]

# need big power (not if battery very low)
[Rule]
name=hi_cpu_boost
ac=off
battery_interval=30-100
cpu_interval=70-100
profile=medum_boost
[/Rule]

# full power when AC
# can reach a 101% score
[Rule] 
name=AC_on
ac=on
profile=hi_boost
[/Rule]

# slow down a little if overheated
# can reach a 102% score
[Rule] 
name=AC_on
ac=on
acpi_temperature=55-100
profile=medium_boost
[/Rule]

# full power when watching DVDs and not AC
# can reach a 105% score
[Rule]
name=dvd_watching
ac=off
battery_interval=0-100
acpi_temperature=0-100
cpu_interval=0-100
programs=xine,mplayer
profile=hi_boost
[/Rule]

.fi
.sp
.RE
.PP
.SH SEE ALSO
.BR cpufreqd(8)
.SH AUTHOR
Mattia Dongili <malattia@gmail.com>

George Staikos <staikos@0wned.org>
