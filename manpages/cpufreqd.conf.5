.\" Copyright 2002-2005, George Staikos (staikos@0wned.org)
.\"                      Mattia Dongili (malattia@linux.it)
.\"                      Rene Rebe (rene@rocklinux.org)
.\" This file may be used subject to the terms and conditions of the
.\" GNU General Public License Version 2, or any later version
.\" at your option, as published by the Free Software Foundation.
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
.\" GNU General Public License for more details."
.TH CPUFREQD.CONF 5 "05 May 2005" "" ""
.SH NAME
cpufreqd.conf \- configuration file for cpufreqd(1)
.SH DESCRIPTION
.I cpufreqd.conf
is a simple text file containing rules to be used by 
.B cpufreqd(1).

.B cpufreqd.conf
is divided into sections enclosed in tags (eg.: [General][/General]). 
You need at least one [General] section and one or more [Profile] and [Rule]
sections.  Each [Rule] depends on previously defined [Profile] subsections.
Some plugins also require a proper configuration section.

Some notes to better understand how to write appropriate rules:

.RS
\- the score of a rule is made up of the percentage of entries that match the
current system state as reported by plugins + the number of matching entries.
In this way even a single\-entry rule can reach 100% but more accurate rules
are preferred.

\- in case of 2 or more rules having the same score the first one (as found in
the configuration file) is kept and applied.

\- each entry is handled by a single plugin that will determine if the state
described matches the current state

\- if no rule matches the current system status, no action is performed.
.RE

What to keep in mind when writing rules:

.RS
\- the \-V switch is your (hopefully) friend, test your configuration slightly
increasing 
.B cpufreqd
verbosity and look what happens (\-V6 will report rules' scores, \-V7 will
report which entry matched and which not).

\- if you want a rule to be preferred over another just describe the system state
more accurately
.RE

A good approach to write cpufreqd rules is to first describe the basic
parameters you want for a general usage (e.g.: define at least an "AC\-on" rule
and an "AC\-off" rule), then proceed and describe all the special cases by
describing the system state more accurately (e.g.: "AC\-off but running mplayer"
or "AC\-on but temperature too hot").

.fi
.PP
Note that no white space is allowed between name and value pairs.
Characters after a '#' are considered comments and ignored.

.SH "SECTIONS"
.PP
Acceptable configuration tokens and values include:

.PP
.SS "[General]"
.TP
.B "poll_interval"
An integer larger than 0, measures the interval between system status reading in
seconds. (default: 1)

.TP
.B "enable_plugins"
A list of plugins separated by comma.

.TP
.B "pidfile"
Specifies the file to write as its process identification file.
(default: /var/run/cpufreqd.pid)
./"
./".TP
./".B "acpi_workaround"
./"0 or 1 meaning disable and enable respectively. (default: 0) As some ACPI
./"implementations are very cpu-consuming when reading the info file of system
./"batteries. Cpufreqd implements a simple workaround that avoids reading that
./"file except on initialisation or reinitialisation. This has the effect of
./"needing to send an HUP signal if inserting a new battery, otherwise battery
./"measurement won't be correct.

.TP
.B "enable_remote"
Make cpufreqd open a local UNIX socket and listen for command to be executed.
See cpufreqd-set(1) and cpufreqd-set(1) for two very simple clients.

.TP
.B "double_check"
Make cpufreqd check if the requested policy has been correctly applied by
re-reading the corresponding kernel attributes.

.TP
.B "verbosity"
Verbosity level from 0 (less verbose) to 7 (most verbose), the default value
only prints warning/error/critical messages. (default: 4)

.PP
.SS "[Profile]"

.TP
.B "name"
An arbitrary and unique name for your profile. [REQUIRED]

.TP
.B "minfreq"
An integer value representing the minimum frequency to set in
/proc/cpufreq. This value can be both a percentage of the CPU full capacity or
frequency in kHz.

.TP
.B "maxfreq"
An integer value representing the maximum frequency to set. This value can be
both a percentage of the CPU full capacity or frequency in kHz.

.TP
.B "policy"
Can be any of the available governor's name as shown in
/sys/devices/.../cpufreq/scaling_available_governors, this means
that if you compiled governors as modules in your kernel, you need to load them
before running cpufreqd. [REQUIRED]

.TP
.B "other plugin entries"
Other Profile options are enabled according to the enabled plugins.

.PP
.SS "[Rule]"

.TP
.B "name"
An arbitrary and unique name for your rule. [REQUIRED]

.TP
.B "profile"
A character string that must match a [Profile] section name property. [REQUIRED]

.TP
.B "other plugin entries"
Other Rule options are enabled according to the enabled plugins.

.SH PLUGINS
.PP
Plugins extend cpufreqd in order to be able to cope with the most exotic system
paramters.  Currently available plugins are listed below along with the
configration directives they provide and their configuration section description
if available.

.PP
.SS "acpi_battery plugin"
Monitors the battery level as reported by /proc/acpi/battery/*/state. If
multiple batteries are present the battery level is computed summing all battery
capacities. Available Rule entries:
.TP
.B "battery_interval"
The rule will have a higher score if battery percentage is between the values
provided. Can be of the form %d-%d or simply %d for a fixed value (e.g.:
battery_interval=10-100) or %s:%d-%d or %s:%d where the string represents the
battery name that must match (look at 'ls /proc/acpi/battery' for available
names).

.PP
.SS "acpi_ac plugin"
Monitors the AC state as reported by /proc/acpi/ac_adapter/*/state.
Available Rule entries:
.TP
.B "ac"
Can be on or off.  The rule will have a higher score if the A/C adapter is on or
off as defined in this setting.

.PP
.SS "acpi_temperature plugin"
Monitors the temperature as reported by /proc/acpi/thermal_zone/*/temperature.
Unfortunately as I don't currently have the necessary harware, if multiple
thermal zones are reported a medium value is computed. Available Rule entries:
.TP
.B "acpi_temperature"
The rule will have a higher score if the temperature percentage is corresponds
to the provided values. Can be of the form %d-%d or simply %d for a fixed value
(e.g.: acpi_temperature=10-100) or %s:%d-%d or %s:%d where the string represents
the thermal zone name that must match (look at 'ls /proc/acpi/thermal_zone' for
available names).

.PP
.SS "apm plugin"
Monitors values reported by the APM subsystem. Available Rule entries:
.TP
.B "ac"
Can be on or off.  The rule will have a higher score if the A/C adapter is on or
off as defined in this setting.
.TP
.B "battery_interval"
The rule will have a higher score if battery percentage is between the values
provided. Must be of the form %d-%d (e.g.: battery_interval=10-100).

.PP
.SS "pmu plugin"
Monitors values reported by the PMU subsystem. Available Rule entries:
.TP
.B "ac"
Can be on or off.  The rule will have a higher score if the A/C adapter is on or
off as defined in this setting.
.TP
.B "battery_interval"
The rule will have a higher score if battery percentage is between the values
provided. Must be of the form %d-%d (e.g.: battery_interval=10-100).

.PP
.SS "cpu plugin"
Monitors the cpu usage. Available Rule entries:
.TP
.B "cpu_interval"
The rule will have a higher score if cpu usage is between the values
provided.  Must be of the form %d-%d (e.g.: cpu_interval=10-100). Rules with
overlapping cpu_intervals are allowed. You can also specify the scale to
calculate niced processes cpu usage with the form %d-%d,%f (e.g.:
cpu_interval=70-100,1.5), default is 3, in this way niced processes will be
considered 1/3 of their real value.

.PP
.SS "programs plugin"
Monitors active processes. Available entries:
.TP
.B "programs"
 The rule will have a higher score if one of the listed processes is running.
 This is  a  comma separated  list.   No  white  space is allowed between
 values.  cpufreqd will try to match each process name with the configured
 process list. If you need to match against program from a spe- cific location
 you have to supply the full path as search pattern.

.PP
.SS "nforce2_atxp1 plugin"
Allows to change Vcore of the CPU on the fly if you own a NForce2 board with
atxp1 voltage regulator (and its module loaded). The use of this plugin will
allow a new Profile directive and requires a configuration section.
.TP
.B "Section [nforce2_atxp1]"
.RS
.B "vcore_path"
Defines the interface file created by atxp1 module which will be used to change
Vcore.

.B "vcore_default"
As NForce2 boards only initialize the atxp1 on power-on, you need to put back
default Vcore before reboot. This value will be used to set Vcore on exit.
.RE

.TP
.B "vcore"
Will set Vcore to this value (given in mV) when the corresponding Profile is
applied. Due to safety reasons range is limited from 1200 to 1850.

.PP
.SS "sensors plugin"
Allows you to specify lm-sensors features to watch, see `sensors \-u' to 
find out which sensors are available on your system.
A configuration section is also available to tell cpufreqd which sensors.conf
file to use. If not specified it will take the first on the default locations.
.TP
.B "Section [sensors_plugin]"
.RS
.B "sensors_conf"
Define this directive to the sensors.conf file you want cpufreqd to use to load
the sensors library.
.RE
.TP
.B "sensor"
The rule will have a higher score if the given sensor feature reports a value
between the two defined. Must be of the form %s:%f-%f where the string
represents the feature name and the two decimal numbers the interval into which
the directive is valid (e.g.: sensor=temp1:0-50).

.SH EXAMPLE
.nf
.ne 7
# cpufreqd.conf sample
# this is a comment
[General]
pidfile=/var/run/cpufreqd.pid
poll_interval=2
enable_plugins=acpi_battery, acpi_ac, acpi_temperature, programs, cpu
verbosity=5 #(if you want a minimal logging)
[/General]

[Profile]
name=hi
minfreq=100%
maxfreq=100%
policy=performance
[/Profile]

[Profile]
name=medium
minfreq=66%
maxfreq=66%
policy=performance
[/Profile]

[Profile]
name=lo
minfreq=33%
maxfreq=33%
policy=performance
[/Profile]

[Profile]
name=ondemand_hi
minfreq=0%
maxfreq=100%
policy=ondemand
[/Profile]

[Profile]
name=ondemand_lo
minfreq=0%
maxfreq=66%
policy=ondemand
[/Profile]

# full power when AC
# max score 101%
[Rule] 
name=AC_on
ac=on
profile=hi
[/Rule]

# conservative mode when not AC
# max score 101%
[Rule]
name=AC_off
ac=off
profile=ondemand_hi
[/Rule]

# low battery
# max score 102%
[Rule]
name=lo_battery
ac=off
battery_interval=0-40
profile=ondemand_lo
[/Rule]

# need big power (not if battery very low)
# max score 103%
[Rule]
name=hi_cpu
ac=off
battery_interval=40-100
cpu_interval=70-100
profile=hi
[/Rule]

# slow down a little if overheated
# max score 103%
[Rule] 
name=overheat
acpi_temperature=55-100
cpu_interval=0-100
battery_interval=40-100
profile=medium
[/Rule]

# full power when watching DVDs and not AC
# can reach a 105% score
[Rule]
name=dvd_watching
ac=off
battery_interval=0-100
acpi_temperature=0-100
cpu_interval=0-100
programs=xine,mplayer
profile=hi
[/Rule]
.fi

.SH SEE ALSO
.BR cpufreqd (8), cpufreqd-set (1), cpufreqd-get (1)

.SH AUTHOR
Mattia Dongili <malattia@linux.it>

George Staikos <staikos@0wned.org>
